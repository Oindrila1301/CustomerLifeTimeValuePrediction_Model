# -*- coding: utf-8 -*-
"""CustomerLifeTimeValuePredictionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zcWXg1tW1XXTsXB3Kma1obZMIIIvNqAR
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')
df = pd.read_csv('/content/Ecommerce_Data-1.csv')
df.head()



df.shape

df['total_revenue']= df['Quantity']*df['UnitPrice']
df.drop('Unnamed: 0', axis=1, inplace=True)
df['Date']=pd.to_datetime(df['Date'])
df= df[df['Quantity']>0]
df.head()

max_date = df['Date'].max()
df2 = df.groupby('CustomerID').agg(
    { 'Date': lambda x: (max_date-x.min()).days,
      'Quantity': lambda x: x.sum(),
      'total_revenue': lambda x: x.sum(),
      'InvoiceNo': lambda x: x.sum(),

    }
)
df2

max_date

def customer_model(data):
    max_date = data['Date'].max()
    data = data.groupby('CustomerID').agg(
      {
      'Date': lambda x: (max_date-x.min()).days,
      'Quantity': lambda x: x.sum(),
      'total_revenue': lambda x: x.sum(),
      'InvoiceNo': lambda x: len(x),
      })
    return data

df['Date'] = pd.to_datetime(df['Date']) # assuming 'Date' column contains date information
data = customer_model(df)
data.head()

data.columns = ['age','quantity','total_rev','num_trans']
data = data[data['quantity']>0]
data.head()

"""**GETTING THE ELEMENTS OF CLTV** **CALCULATION**"""

data['avg_order_value'] = data['total_rev']/data['num_trans']
data

purchase_freq = sum(data['num_trans'])/len(data)
purchase_freq

repeat_rate = data[data['num_trans']>1].shape[0]/data.shape[0]
repeat_rate

churn_rate = 1-repeat_rate
churn_rate

data['profit_margin'] = data['total_rev']*10

data.head()

"""**PUTTING ALL THE EQUATIONS TOGETHER WE GET**"""

data['CLTV'] = ((data['avg_order_value']*purchase_freq)/churn_rate)*.10
data

import seaborn as sns
print("the median CLTV is", data['CLTV'].median())
print("the average CLTV is", data['CLTV'].mean())

data.sort_values(by='CLTV').reset_index()

data.to_csv("finalEC_dataset.csv")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import xgboost as xgb
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

X = data.drop('CLTV',axis=1)
y = data['CLTV']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = xgb.XGBRegressor()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print("Root Mean Squared Error:", rmse)

new_customer_data = pd.read_csv('finalEC_dataset.csv')

print(X_train.shape)
print(y_train.shape)

!pip install lifetimes

import pandas as pd
from lifetimes import GammaGammaFitter
from lifetimes import BetaGeoFitter
from lifetimes.utils import summary_data_from_transaction_data

data